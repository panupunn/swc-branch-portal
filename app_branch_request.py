
# -*- coding: utf-8 -*-
"""
WishCo Branch Portal ‚Äî ‡πÄ‡∏ö‡∏¥‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå
Full flow: Login + Health Check + ‡πÄ‡∏ö‡∏¥‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå (Items OUT)
Version: v2025-09-02c

Key points:
- Safe rerun across Streamlit versions (st.rerun fallback).
- Login fixed (indentation, Users header relaxed, bcrypt-first).
- Health Check (compact): only shows found secret keys & spreadsheet title.
- Issue page "‡πÄ‡∏ö‡∏¥‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå": browse/search Items, input quantities, commit to Transactions,
  update stock with basic concurrency checks and helpful messages.
- Auto-create/repair headers for Users, Items, Transactions sheets if missing.
- Minimal UI and Thai labels, smartphone-friendly.
"""
from __future__ import annotations
import os, json, time, uuid
from typing import Dict, Any, List, Optional

import streamlit as st
import pandas as pd

try:
    import gspread  # type: ignore
except Exception:
    gspread = None

try:
    import bcrypt  # type: ignore
except Exception:
    bcrypt = None


# ----------------------------- Streamlit helpers -----------------------------
def _ensure_session_defaults():
    if "auth" not in st.session_state: st.session_state["auth"] = False
    if "user" not in st.session_state: st.session_state["user"] = {}
    if "cart" not in st.session_state: st.session_state["cart"] = {}  # {ItemCode: qty}


def _safe_rerun():
    try: st.rerun()
    except Exception:
        try: st.experimental_rerun()
        except Exception: pass


# ----------------------------- Secrets / Sheets ------------------------------
def _get_sa_dict_from_secrets() -> Optional[Dict[str, Any]]:
    try:
        s = st.secrets
    except Exception:
        return None

    if "GOOGLE_SERVICE_ACCOUNT_JSON" in s:
        raw = s["GOOGLE_SERVICE_ACCOUNT_JSON"]
        if isinstance(raw, str):
            try:
                return json.loads(raw)
            except Exception:
                pass
        if isinstance(raw, dict):
            return dict(raw)

    if "gcp_service_account" in s and isinstance(s["gcp_service_account"], dict):
        return dict(s["gcp_service_account"])

    flat = [
        "type","project_id","private_key_id","private_key","client_email",
        "client_id","auth_uri","token_uri","auth_provider_x509_cert_url","client_x509_cert_url"
    ]
    try:
        if all(k in s for k in flat):
            return {k: s[k] for k in flat}
    except Exception:
        pass
    return None


def _get_sheet_loc_from_secrets() -> Dict[str, str]:
    out: Dict[str, str] = {}
    try:
        s = st.secrets
    except Exception:
        s = {}
    for k in ["SHEET_ID","sheet_id","SPREADSHEET_ID","SHEET_URL","sheet_url","SPREADSHEET_URL"]:
        v = None
        if isinstance(s, dict) and k in s: v = s[k]
        if not v: v = os.environ.get(k)
        if v:
            if "URL" in k.upper(): out["sheet_url"] = str(v)
            else: out["sheet_id"] = str(v)
    return out


def _open_spreadsheet():
    if gspread is None:
        raise RuntimeError("gspread not available. Add it to requirements.")
    sa = _get_sa_dict_from_secrets()
    if not sa:
        raise RuntimeError("Service Account not found in secrets.")
    gc = gspread.service_account_from_dict(sa)
    loc = _get_sheet_loc_from_secrets()
    if "sheet_id" in loc: return gc.open_by_key(loc["sheet_id"])
    if "sheet_url" in loc: return gc.open_by_url(loc["sheet_url"])
    raise RuntimeError("Missing SHEET_ID or SHEET_URL in secrets.")


def _list_found_secret_keys() -> List[str]:
    found = []
    try:
        s = st.secrets
        if "GOOGLE_SERVICE_ACCOUNT_JSON" in s: found.append("GOOGLE_SERVICE_ACCOUNT_JSON")
        if "gcp_service_account" in s: found.append("gcp_service_account")
        for k in ("SHEET_ID","sheet_id","SPREADSHEET_ID","SHEET_URL","sheet_url","SPREADSHEET_URL"):
            if k in s: found.append(k)
    except Exception:
        pass
    for k in ("SHEET_ID","SPREADSHEET_ID","SHEET_URL","SPREADSHEET_URL"):
        if os.environ.get(k): found.append(k+" (env)")
    return found


# ----------------------------- Data helpers ---------------------------------
CANONICAL_COLS = {
    "username": ["username","user","‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ","‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ","‡∏ä‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡πÉ‡∏ä‡πâ"],
    "branchcode": ["branchcode","branch","‡∏™‡∏≤‡∏Ç‡∏≤","‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤","code"],
    "password": ["password","‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô"],
    "passwordhash": ["passwordhash","hash","bcrypt","passhash"],
    "displayname": ["displayname","name","‡∏ä‡∏∑‡πà‡∏≠","‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏™‡∏î‡∏á"],
    "active": ["active","enabled","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞","isactive"],
    "role": ["role","‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á","‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå"],

    "itemcode": ["itemcode","code","‡∏£‡∏´‡∏±‡∏™","‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤","‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"],
    "itemname": ["itemname","name","‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤","‡∏ä‡∏∑‡πà‡∏≠‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"],
    "stock": ["stock","‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠","‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á"],
    "unit": ["unit","‡∏´‡∏ô‡πà‡∏ß‡∏¢","‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ô‡∏±‡∏ö"],
    "category": ["category","‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà","‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó"],
}
REQUIRED_ANY_OF = ["password","passwordhash"]
REQUIRED_ALWAYS = ["username"]


def _normalize_cols(df: pd.DataFrame) -> pd.DataFrame:
    mapping = {}
    lowers = {str(c).strip().lower(): c for c in df.columns}
    for canon, alts in CANONICAL_COLS.items():
        for a in alts+[canon]:
            if a.lower() in lowers:
                mapping[lowers[a.lower()]] = canon
    return df.rename(columns=mapping).copy()


# ----- Users -----
def _read_users_df(ss) -> pd.DataFrame:
    try: ws = ss.worksheet("Users")
    except Exception:
        ws = ss.add_worksheet(title="Users", rows=100, cols=10)
        ws.update("A1:F1", [["Username","DisplayName","Role","PasswordHash","Active","BranchCode"]])
    values = ws.get_all_values()
    if not values:
        header = ["Username","DisplayName","Role","PasswordHash","Active","BranchCode"]
        ws.update("A1:F1", [header])
        values = [header]
    df = pd.DataFrame(values[1:], columns=values[0])
    return _normalize_cols(df)


# ----- Items -----
ITEMS_HEADER = ["ItemCode","ItemName","Stock","Unit","Category","Active"]
def _read_items_df(ss) -> pd.DataFrame:
    try: ws = ss.worksheet("Items")
    except Exception:
        ws = ss.add_worksheet(title="Items", rows=1000, cols=10)
        ws.update("A1:F1", [ITEMS_HEADER])
    values = ws.get_all_values()
    if not values:
        ws.update("A1:F1", [ITEMS_HEADER]); values = [ITEMS_HEADER]
    df = pd.DataFrame(values[1:], columns=values[0])
    df = _normalize_cols(df)
    # Standardize numeric stock
    if "stock" in df.columns:
        def _to_num(x):
            try:
                return float(str(x).replace(",","").strip()) if str(x).strip()!="" else 0.0
            except Exception:
                return 0.0
        df["stock"] = df["stock"].map(_to_num)
    return df


# ----- Transactions -----
TX_HEADER = ["TxTime","TxID","Username","BranchCode","ItemCode","ItemName","Qty","Type","Note"]
def _append_transactions(ss, rows: List[List[Any]]):
    try: ws = ss.worksheet("Transactions")
    except Exception:
        ws = ss.add_worksheet(title="Transactions", rows=1000, cols=15)
        ws.update("A1:I1", [TX_HEADER])
    # Append rows
    ws.append_rows(rows, value_input_option="USER_ENTERED")


# ----------------------------- Business rules -------------------------------
def _is_active(val) -> bool:
    if val is None: return True
    s = str(val).strip().lower()
    return s not in ("n","no","0","false","inactive","disabled")


def _verify_password(row: pd.Series, raw: str) -> bool:
    ph = str(row.get("passwordhash") or "").strip()
    pw = str(row.get("password") or "").strip()
    if ph and bcrypt:
        try:
            return bcrypt.checkpw(raw.encode("utf-8"), ph.encode("utf-8"))
        except Exception:
            pass
    if pw:
        return raw == pw
    return False


def _derive_branch_code(ss, row: pd.Series) -> str:
    bc = str(row.get("branchcode") or "").strip()
    if bc: return bc
    # Try first Branch in "Branches"
    try:
        ws = ss.worksheet("Branches")
        vals = ws.get_all_values()
        if vals and len(vals) > 1:
            header = [h.strip().lower() for h in vals[0]] if vals[0] else []
            idx = 0
            for i,h in enumerate(header):
                if h in ("code","branchcode","‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≤‡∏Ç‡∏≤","branch_code","‡∏™‡∏≤‡∏Ç‡∏≤"):
                    idx = i; break
            guess = str(vals[1][idx]).strip() if len(vals[1])>idx else ""
            if guess: return guess
    except Exception:
        pass
    return "SWC000"


# ----------------------------- UI: Health Check -----------------------------
def page_health_check():
    st.title("WishCo Branch Portal ‚Äî ‡πÄ‡∏ö‡∏¥‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
    st.header("ü©∫ Health Check ‚Äî ‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÅ‡∏•‡∏∞‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡πÄ‡∏õ‡∏£‡∏î‡∏ä‡∏µ‡∏ï")
    found = _list_found_secret_keys()
    if found:
        st.info("‡∏û‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô secrets.toml: " + ", ".join(found))
    else:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏µ‡∏¢‡πå‡πÉ‡∏ô secrets.toml/ENV")
    try:
        ss = _open_spreadsheet()
        st.success(f"‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ: {ss.title}")
    except Exception as e:
        st.error(f"‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡πÄ‡∏õ‡∏£‡∏î‡∏ä‡∏µ‡∏ï‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")


# ----------------------------- UI: Login ------------------------------------
def page_login():
    st.sidebar.subheader("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏≤‡∏Ç‡∏≤/‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô")
    uname = st.sidebar.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ", key="login_username")
    pw = st.sidebar.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô", type="password", key="login_password")
    clicked = st.sidebar.button("‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô", use_container_width=True)

    if not clicked:
        st.title("WishCo Branch Portal ‚Äî ‡πÄ‡∏ö‡∏¥‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
        return

    # Connect & read user
    try:
        ss = _open_spreadsheet(); df = _read_users_df(ss)
    except Exception as e:
        st.error(f"‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠‡∏™‡πÄ‡∏õ‡∏£‡∏î‡∏ä‡∏µ‡∏ï‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡πà‡∏≤‡∏ô‡πÅ‡∏ó‡πá‡∏ö Users ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ: {e}"); return

    cols_lower = [c.lower() for c in df.columns]
    missing_always = [c for c in REQUIRED_ALWAYS if c not in cols_lower]
    has_any_pwd = any(x in cols_lower for x in REQUIRED_ANY_OF)
    if missing_always or not has_any_pwd:
        st.error("Users sheet ‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå (‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ Username ‡πÅ‡∏•‡∏∞ Password ‡∏´‡∏£‡∏∑‡∏≠ PasswordHash)"); return

    u = (uname or "").strip().lower()
    if not u:
        st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"); return

    dfn = df.copy()
    dfn["username_norm"] = dfn["username"].astype(str).str.strip().str.lower()
    row = dfn[dfn["username_norm"] == u].head(1)
    if row.empty:
        st.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ"); return
    r = row.iloc[0]

    if "active" in dfn.columns and not _is_active(r.get("active")):
        st.error("‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡∏Å‡∏≤‡∏£‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô"); return

    if not _verify_password(r, pw or ""):
        if r.get("passwordhash") and not bcrypt:
            st.error("‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏ä‡πâ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏ö‡∏ö‡πÅ‡∏Æ‡∏ä ‡πÅ‡∏ï‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÑ‡∏•‡∏ö‡∏£‡∏≤‡∏£‡∏µ bcrypt")
        else:
            st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return

    st.session_state["user"] = {
        "username": str(r.get("username") or "").strip(),
        "displayname": str(r.get("displayname") or ""),
        "role": str(r.get("role") or ""),
        "branch_code": _derive_branch_code(ss, r),
    }
    st.session_state["auth"] = True
    st.success("‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚Äî ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤‡∏™‡∏†‡∏≤‡∏û‡πÅ‡∏ß‡∏î‡∏•‡πâ‡∏≠‡∏°...")
    _safe_rerun()


# ----------------------------- UI: Issue Items ------------------------------
def _render_cart_table(items_df: pd.DataFrame, cart: Dict[str, float]):
    if not cart:
        st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å")
        return pd.DataFrame()
    codes = list(cart.keys())
    sub = items_df[items_df["itemcode"].astype(str).isin(codes)].copy()
    sub["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å"] = sub["itemcode"].map(cart).fillna(0)
    sub = sub[["itemcode","itemname","stock","‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å","unit","category"]]
    st.dataframe(sub, use_container_width=True, hide_index=True)
    return sub


def page_issue():
    user = st.session_state.get("user", {})
    if not user:
        st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡πà‡∏≠‡∏ô")
        return

    st.title("WishCo Branch Portal ‚Äî ‡πÄ‡∏ö‡∏¥‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå")
    st.caption(f"‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: **{user.get('username','')}** | ‡∏™‡∏≤‡∏Ç‡∏≤: **{user.get('branch_code','')}**")

    # Connect + load items
    try:
        ss = _open_spreadsheet()
        df_items = _read_items_df(ss)
    except Exception as e:
        st.error(f"‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠/‡∏≠‡πà‡∏≤‡∏ô Items ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        return

    # Filter only active
    if "active" in df_items.columns:
        df_show = df_items[df_items["active"].apply(_is_active)].copy()
    else:
        df_show = df_items.copy()

    # Search
    q = st.text_input("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ä‡∏∑‡πà‡∏≠/‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå", placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô ‡πÄ‡∏ä‡πà‡∏ô '‡∏™‡∏≤‡∏¢ HDMI' ‡∏´‡∏£‡∏∑‡∏≠ 'HDMI'")
    if q:
        s = q.strip().lower()
        df_show = df_show[
            df_show["itemname"].astype(str).str.lower().str.contains(s) |
            df_show["itemcode"].astype(str).str.lower().str.contains(s)
        ]

    # Prepare editable column for quantity
    edit_df = df_show[["itemcode","itemname","stock"]].copy()
    edit_df["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å"] = 0
    edited = st.data_editor(
        edit_df,
        num_rows="dynamic",
        column_config={
            "itemcode": st.column_config.TextColumn("‡∏£‡∏´‡∏±‡∏™"),
            "itemname": st.column_config.TextColumn("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£"),
            "stock": st.column_config.NumberColumn("‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠"),
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å": st.column_config.NumberColumn("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å", min_value=0, step=1),
        },
        disabled=["itemcode","itemname","stock"],
        hide_index=True,
        use_container_width=True,
        key="edit_items"
    )

    col1, col2 = st.columns(2)
    with col1:
        if st.button("‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏•‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤ / ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", use_container_width=True):
            cart = {}
            for _, row in edited.iterrows():
                qty = float(row.get("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å") or 0)
                code = str(row.get("itemcode"))
                if qty > 0:
                    cart[code] = qty
            st.session_state["cart"] = cart
            st.success(f"‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß: {len(cart)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
    with col2:
        if st.button("‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤", use_container_width=True):
            st.session_state["cart"] = {}
            st.info("‡∏•‡πâ‡∏≤‡∏á‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß")

    # Show cart
    st.subheader("‡∏ï‡∏∞‡∏Å‡∏£‡πâ‡∏≤")
    sub = _render_cart_table(df_items, st.session_state.get("cart", {}))

    # Commit
    if not sub.empty and st.button("‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å", type="primary", use_container_width=True):
        # Validation vs stock
        cart = st.session_state.get("cart", {})
        insufficient = []
        for _, r in sub.iterrows():
            if float(r["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å"]) > float(r["stock"]):
                insufficient.append((r["itemcode"], r["itemname"], r["stock"], r["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å"]))
        if insufficient:
            st.error("‡∏™‡∏ï‡πá‡∏≠‡∏Å‡πÑ‡∏°‡πà‡∏û‡∏≠: " + ", ".join([f"{c} ({have} < {need})" for c,_,have,need in insufficient]))
            return

        # Append transactions & update stock
        now = time.strftime("%Y-%m-%d %H:%M:%S")
        txid = f"OUT-{int(time.time())}-{uuid.uuid4().hex[:6].upper()}"
        rows = []
        for _, r in sub.iterrows():
            rows.append([
                now, txid, user.get("username",""), user.get("branch_code",""),
                r["itemcode"], r["itemname"], float(r["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å"]), "OUT", ""
            ])
        try:
            _append_transactions(ss, rows)
            # Update each item stock
            ws = ss.worksheet("Items")
            values = ws.get_all_values()
            header = values[0] if values else ITEMS_HEADER
            # Build index of code -> row number
            code_idx = 0
            for i,h in enumerate(header):
                if str(h).strip().lower() in ("itemcode","code","‡∏£‡∏´‡∏±‡∏™","‡∏£‡∏´‡∏±‡∏™‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤","‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå"):
                    code_idx = i; break
            stock_idx = None
            for i,h in enumerate(header):
                if str(h).strip().lower() in ("stock","‡∏Ñ‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠","‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏á‡∏Ñ‡∏•‡∏±‡∏á"):
                    stock_idx = i; break
            if stock_idx is None:
                # create Stock column if missing
                stock_idx = len(header)
                header.append("Stock")
                ws.update_cell(1, stock_idx+1, "Stock")
                values = ws.get_all_values()
            # Build map
            code_to_rownum = {}
            for rn in range(2, len(values)+1):
                row_vals = values[rn-1] if rn-1 < len(values) else []
                code = str(row_vals[code_idx]).strip() if len(row_vals)>code_idx else ""
                if code:
                    code_to_rownum[code] = rn
            # Apply updates
            batch_updates = []
            for _, r in sub.iterrows():
                code = str(r["itemcode"])
                rn = code_to_rownum.get(code)
                if rn:
                    current_stock = float(r["stock"])
                    new_stock = current_stock - float(r["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏ö‡∏¥‡∏Å"])
                    batch_updates.append({"range": f"{chr(ord('A')+stock_idx)}{rn}", "values": [[new_stock]]})
            if batch_updates:
                ws.batch_update([{"range": u["range"], "values": u["values"]} for u in batch_updates])
            st.success(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å {len(rows)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢ (‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà {txid})")
            st.session_state["cart"] = {}
            _safe_rerun()
        except Exception as e:
            st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ö‡∏¥‡∏Å‡πÑ‡∏î‡πâ: {e}")


# ----------------------------- Main / Routing -------------------------------
def main():
    st.set_page_config(page_title="WishCo Branch Portal", layout="wide", page_icon="üß∞")
    _ensure_session_defaults()

    if st.session_state.get("auth", False):
        menu = st.sidebar.radio("‡πÄ‡∏°‡∏ô‡∏π", options=["‡πÄ‡∏ö‡∏¥‡∏Å‡∏≠‡∏∏‡∏õ‡∏Å‡∏£‡∏ì‡πå","Health Check","‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö"], index=0)
        if menu == "Health Check":
            page_health_check()
        elif menu == "‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö":
            st.session_state["auth"] = False
            st.session_state["user"] = {}
            st.session_state["cart"] = {}
            st.success("‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
            _safe_rerun()
        else:
            page_issue()
    else:
        menu = st.sidebar.radio("‡πÄ‡∏°‡∏ô‡∏π", options=["‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö","Health Check"], index=0)
        if menu == "Health Check":
            page_health_check()
        else:
            page_login()


if __name__ == "__main__":
    main()
